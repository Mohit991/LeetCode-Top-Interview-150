# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

# Recursive Solution --> 
class Solution:
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        def isSymmetricTree(root1, root2):
            if not root1 and not root2:
                return True
            if (not root1 and root2) or (root1 and not root2) or root1.val != root2.val:
                return False
            
            return isSymmetricTree(root1.left, root2.right) and isSymmetricTree(root1.right, root2.left)
        
        return isSymmetricTree(root.left, root.right)

################################################################################
    
# Recurise solution can be converted into a iterative solution by using a stack.
# Recursion uses a stack internally. 
# So, we will simply use a stack and get the required reuslt. 

class Solution:
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        stack = []
        stack.append(root.left)
        stack.append(root.right)
        
        while stack:
            r1 = stack.pop()
            r2 = stack.pop()
            
            if not r1 and not r2:
                continue
            
            if (r1 and not r2) or (not r1 and r2) or r1.val != r2.val:
                return False
            
            stack.append(r1.left)
            stack.append(r2.right)
            stack.append(r1.right)
            stack.append(r2.left)
            
        return True
        
        
        
        
