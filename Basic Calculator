class Solution:
    def calculate(self, s: str) -> int:
        # sign == 1 means +
        # sign == -1 means -
        # By default the sign is + i.e. 1
        
        current, output, sign, stack = 0, 0, 1, []
        
        for c in s:
            #Here we are trying to find the current number
            #since current number can be of multiple digits hence we need to do 
            #these calculations. 
            if c.isdigit(): 
                current = current * 10 + int(c)
                
            #when we see a sign, we will update our current number to + or -.
            #To do so, we will use the sign we saw last time, remmeber the sign
            #is + by default. So, if we did not see any sign last time, then 
            #the number is made positive. 
            #we set output to current and current to zero, bc from now on we want
            #to find new current(second value for our calculation)
            #We also update the sign variable to -1 or +1, because we will use this
            #to assign sign to the next value we will find. 
            elif c in '+-':
                output += current*sign
                current = 0 
                if c == '-':
                    sign = -1
                else:
                    sign = 1
                    
            #If we see '(', we will append output and sign to the stack. 
            #We need to do this because if we see '(' we will 100% see ')'
            #And when we see ')' we will use the stack to get the value and sign for
            #the calculation. 
            #we will also reset output and sign, because inside '(', we will have
            #to do new calculations and we can use stack to do this unifinished 
            #calculation.
            elif c == '(':
                stack.append(output)
                stack.append(sign)
                output = 0
                sign = 1
                
            
            #We we see ')', that means first we need to finished the inner 
            #calculation ie between (). If you notice when we get ')', we have not
            #finished the calculation because we come directly to this branch. 
            #in order to finish last calculation of (), we have to write two
            #statements here. Once last calculation is complete, we not put a sign
            #to the output, this is because whatever was the sign before '('
            #that should be the sign of the whole expression(output).
            #eg 1 - (3+2) means 1 - (5) and sign of 5 should be '-'
            #so we put sign to output and add it to the stack top. 
            #This may be addition or subtraction depending on the sign. 
            elif c == ')':
                output += current * sign 
                current = 0
                
                output = output * stack.pop() #This is also a sign ie -1 or 1
                output += stack.pop() #this is the last result
                
        
        #If there are no left or right parans in the equation, in that case
        #We will have to add current * sign(making current negative if thats the
        #case) to the output and return that. 
        return output + (current * sign)
            
