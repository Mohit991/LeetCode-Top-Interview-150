# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right


# private TreeNode prev = null;

# public void flatten(TreeNode root) {
#     if (root == null)
#         return;
#     flatten(root.right);
#     flatten(root.left);
#     root.right = prev;
#     root.left = null;
#     prev = root;
# }


class Solution:
    def flatten(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        if not root:
            return root
        
        def preorder(root):
            if not root:
                return
            TreeNodeList.append(root.val)
            preorder(root.left)
            preorder(root.right)
            return 
        
        TreeNodeList = []
        preorder(root)
        
        for i in range(1, len(TreeNodeList)):
            val = TreeNodeList[i]
            newNode = TreeNode(val, None, None)
            root.right = newNode
            root.left = None
            root = root.right
            
###########################################################################

class Solution:
    def flatten(self, root: Optional[TreeNode]) -> None:
        def dfs(root):
            if not root:
                return None
            
            leftTail = dfs(root.left)
            rightTail = dfs(root.right)
            
            if root.left:
                leftTail.right = root.right
                root.right = root.left
                root.left = None
            
            last = root
            if rightTail:
                last = rightTail
            elif leftTail:
                last = leftTail
            return last
        
        dfs(root)
        
